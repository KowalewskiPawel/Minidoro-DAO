{"version":3,"sources":["App.jsx","index.jsx"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","useWeb3","connectWallet","address","error","provider","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","getAll","then","console","log","catch","err","length","proposalId","getAllClaimerAddresses","addresses","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","UnsupportedChainIdError","className","onClick","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","name","value","defaultChecked","htmlFor","label","disabled","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.decfa776.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\";\nimport { UnsupportedChainIdError } from \"@web3-react/core\";\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0x9aCDAe19212b34b92399c74062E261BecbF549C2\"\n);\n\nconst tokenModule = sdk.getTokenModule(\n  \"0x3c66DEF4bF49c060F265F007c2dafe2961152A2C\"\n);\n\nconst voteModule = sdk.getVoteModule(\n  \"0x90F62a489d507b00e0F92520620004aEeeBFb132\"\n);\n\nconst App = () => {\n  const { connectWallet, address, error, provider } = useWeb3();\n\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  const [memberAddresses, setMemberAddresses] = useState([]);\n\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    voteModule\n      .getAll()\n      .then((proposals) => {\n        setProposals(proposals);\n        console.log(\"ðŸŒˆ Proposals:\", proposals);\n      })\n      .catch((err) => {\n        console.error(\"failed to get proposals\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    if (!proposals.length) {\n      return;\n    }\n\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((hasVoted) => {\n        setHasVoted(hasVoted);\n        if (hasVoted) {\n          console.log(\"ðŸ¥µ User has already voted\");\n        } else {\n          console.log(\"ðŸ™‚ User has not voted yet\");\n        }\n      })\n      .catch((err) => {\n        console.error(\"failed to check if wallet has voted\", err);\n      });\n  }, [hasClaimedNFT, proposals, address]);\n\n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    bundleDropModule\n      .getAllClaimerAddresses(\"0\")\n      .then((addresses) => {\n        setMemberAddresses(addresses);\n      })\n      .catch((err) => {\n        console.error(\"failed to get member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error(\"failed to get token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          memberTokenAmounts[address] || 0,\n          18\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  useEffect(() => {\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n        } else {\n          setHasClaimedNFT(false);\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(error);\n      });\n  }, [address]);\n\n  if (error instanceof UnsupportedChainIdError) {\n    return (\n      <div className='unsupported-network'>\n        <h2>Please connect to Rinkeby</h2>\n        <p>\n          This dapp only works on the Rinkeby network, please switch networks in\n          your connected wallet.\n        </p>\n      </div>\n    );\n  }\n\n  if (!address) {\n    return (\n      <div className='landing'>\n        <h1>Welcome to 5 A.M. Club</h1>\n        <button onClick={() => connectWallet(\"injected\")} className='btn-hero'>\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n\n  const mintNft = () => {\n    setIsClaiming(true);\n    bundleDropModule\n      .claim(\"0\", 1)\n      .then(() => {\n        setHasClaimedNFT(true);\n        console.log(\n          `ðŸŒŠ Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n        );\n      })\n      .catch((err) => {\n        console.error(\"failed to claim\", err);\n      })\n      .finally(() => {\n        setIsClaiming(false);\n      });\n  };\n\n  if (hasClaimedNFT) {\n    return (\n      <div className='member-page'>\n        <h1>5 A.M. Club Member Page</h1>\n        <p>Congratulations, you are a member</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className='card'>\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                setIsVoting(true);\n                const votes = proposals.map((proposal) => {\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      proposal.proposalId + \"-\" + vote.type\n                    );\n\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n                try {\n                  const delegation = await tokenModule.getDelegationOf(address);\n                  if (delegation === ethers.constants.AddressZero) {\n                    await tokenModule.delegateTo(address);\n                  }\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        const proposal = await voteModule.get(vote.proposalId);\n                        if (proposal.state === 1) {\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n                        return;\n                      })\n                    );\n                    try {\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          const proposal = await voteModule.get(\n                            vote.proposalId\n                          );\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n                      setHasVoted(true);\n                      console.log(\"successfully voted\");\n                    } catch (err) {\n                      console.error(\"failed to execute votes\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to vote\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to delegate tokens\");\n                } finally {\n                  setIsVoting(false);\n                }\n              }}>\n              {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className='card'>\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type='radio'\n                          id={proposal.proposalId + \"-\" + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type='submit'>\n                {isVoting\n                  ? \"Voting...\"\n                  : hasVoted\n                  ? \"You Already Voted\"\n                  : \"Submit Votes\"}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='mint-nft'>\n      <h1>Mint your free 5 A.M. Club Membership NFT</h1>\n      <button disabled={isClaiming} onClick={() => mintNft()}>\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { ThirdwebWeb3Provider } from \"@3rdweb/hooks\";\n\nconst supportedChainIds = [4];\n\nconst connectors = {\n  injected: {},\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}>\n      <App />\n    </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}